module Timer_Renderer (
    input [9:0] h_count,
    input [9:0] v_count,
    input       display_area,
    input [7:0] time_elapsed, // range: 0 to 99
    output [7:0] r,
    output [7:0] g,
    output [7:0] b,
    output       draw
);

    localparam DIGIT_WIDTH  = 8'd24;
    localparam DIGIT_HEIGHT = 8'd32;
    localparam DIGIT_SPACING = 8'd8;

    localparam SCREEN_WIDTH = 10'd640;

    localparam DIGIT_TOP    = 10'd20;
    localparam UNDERBAR_HEIGHT = 4;

    // Calculate digit positions
    wire [3:0] left_digit = time_seconds / 10;
    wire [3:0] right_digit = time_seconds % 10;

    localparam total_width = (2 * DIGIT_WIDTH) + DIGIT_SPACING;
    localparam digit_left_x = (SCREEN_WIDTH - total_width) / 2;
    localparam digit_right_x = digit_left_x + DIGIT_WIDTH + DIGIT_SPACING;

    // Character ROM: 10-digit 24x32 font
    reg [23:0] digit_rom [0:9][0:31];

    integer i;
    initial begin
        // reset rom first
        for (i = 0; i < 10; i = i + 1) begin
            digit_rom[i][ 0] = 0; digit_rom[i][ 1] = 0; digit_rom[i][ 2] = 0; digit_rom[i][ 3] = 0;
            digit_rom[i][ 4] = 0; digit_rom[i][ 5] = 0; digit_rom[i][ 6] = 0; digit_rom[i][ 7] = 0;
            digit_rom[i][ 8] = 0; digit_rom[i][ 9] = 0; digit_rom[i][10] = 0; digit_rom[i][11] = 0;
            digit_rom[i][12] = 0; digit_rom[i][13] = 0; digit_rom[i][14] = 0; digit_rom[i][15] = 0;
            digit_rom[i][16] = 0; digit_rom[i][17] = 0; digit_rom[i][18] = 0; digit_rom[i][19] = 0;
            digit_rom[i][20] = 0; digit_rom[i][21] = 0; digit_rom[i][22] = 0; digit_rom[i][23] = 0;
            digit_rom[i][24] = 0; digit_rom[i][25] = 0; digit_rom[i][26] = 0; digit_rom[i][27] = 0;
            digit_rom[i][28] = 0; digit_rom[i][29] = 0; digit_rom[i][30] = 0; digit_rom[i][31] = 0;
        end
        // define a map of the digits in rom
        digit_rom[0][0]  = 24'b000011111110000000000000;
        digit_rom[0][1]  = 24'b000110000011000000000000;
        digit_rom[0][2]  = 24'b001000000001000000000000;
        digit_rom[0][3]  = 24'b001000000001000000000000;
        digit_rom[0][4]  = 24'b001000000001000000000000;
        digit_rom[0][5]  = 24'b001000000001000000000000;
        digit_rom[0][6]  = 24'b001000000001000000000000;
        digit_rom[0][7]  = 24'b001000000001000000000000;
        digit_rom[0][8]  = 24'b001000000001000000000000;
        digit_rom[0][9]  = 24'b000110000011000000000000;
        digit_rom[0][10] = 24'b000011111110000000000000;

        // Digit 1
        digit_rom[1][0]  = 24'b000000110000000000000000;
        digit_rom[1][1]  = 24'b000001110000000000000000;
        digit_rom[1][2]  = 24'b000011110000000000000000;
        digit_rom[1][3]  = 24'b000000110000000000000000;
        digit_rom[1][4]  = 24'b000000110000000000000000;
        digit_rom[1][5]  = 24'b000000110000000000000000;
        digit_rom[1][6]  = 24'b000000110000000000000000;
        digit_rom[1][7]  = 24'b000000110000000000000000;
        digit_rom[1][8]  = 24'b000000110000000000000000;
        digit_rom[1][9]  = 24'b000000110000000000000000;
        digit_rom[1][10] = 24'b000111111110000000000000;

        // Digit 2
        digit_rom[2][0]  = 24'b000111111100000000000000;
        digit_rom[2][1]  = 24'b001100000110000000000000;
        digit_rom[2][2]  = 24'b011000000011000000000000;
        digit_rom[2][3]  = 24'b000000000011000000000000;
        digit_rom[2][4]  = 24'b000000000110000000000000;
        digit_rom[2][5]  = 24'b000000001100000000000000;
        digit_rom[2][6]  = 24'b000000011000000000000000;
        digit_rom[2][7]  = 24'b000000110000000000000000;
        digit_rom[2][8]  = 24'b000001100000000000000000;
        digit_rom[2][9]  = 24'b000011000000000000000000;
        digit_rom[2][10] = 24'b001111111110000000000000;

        // Digit 3
        digit_rom[3][0]  = 24'b000111111100000000000000;
        digit_rom[3][1]  = 24'b001100000110000000000000;
        digit_rom[3][2]  = 24'b000000000110000000000000;
        digit_rom[3][3]  = 24'b000000000110000000000000;
        digit_rom[3][4]  = 24'b000001111100000000000000;
        digit_rom[3][5]  = 24'b000001111000000000000000;
        digit_rom[3][6]  = 24'b000000000110000000000000;
        digit_rom[3][7]  = 24'b000000000011000000000000;
        digit_rom[3][8]  = 24'b011000000011000000000000;
        digit_rom[3][9]  = 24'b001100000110000000000000;
        digit_rom[3][10] = 24'b000111111100000000000000;

        // Digit 4
        digit_rom[4][0]  = 24'b000000011000000000000000;
        digit_rom[4][1]  = 24'b000000111000000000000000;
        digit_rom[4][2]  = 24'b000001111000000000000000;
        digit_rom[4][3]  = 24'b000011011000000000000000;
        digit_rom[4][4]  = 24'b000110011000000000000000;
        digit_rom[4][5]  = 24'b001100011000000000000000;
        digit_rom[4][6]  = 24'b011000011000000000000000;
        digit_rom[4][7]  = 24'b011111111110000000000000;
        digit_rom[4][8]  = 24'b000000011000000000000000;
        digit_rom[4][9]  = 24'b000000011000000000000000;
        digit_rom[4][10] = 24'b000000011000000000000000;
        // Digit 5
        digit_rom[5][0]  = 24'b001111111110000000000000;
        digit_rom[5][1]  = 24'b001100000000000000000000;
        digit_rom[5][2]  = 24'b001100000000000000000000;
        digit_rom[5][3]  = 24'b001100000000000000000000;
        digit_rom[5][4]  = 24'b001111111000000000000000;
        digit_rom[5][5]  = 24'b000000001100000000000000;
        digit_rom[5][6]  = 24'b000000000110000000000000;
        digit_rom[5][7]  = 24'b000000000011000000000000;
        digit_rom[5][8]  = 24'b011000000011000000000000;
        digit_rom[5][9]  = 24'b001100000110000000000000;
        digit_rom[5][10] = 24'b000111111100000000000000;

        // Digit 6
        digit_rom[6][0]  = 24'b000011111100000000000000;
        digit_rom[6][1]  = 24'b000110000000000000000000;
        digit_rom[6][2]  = 24'b001100000000000000000000;
        digit_rom[6][3]  = 24'b001100000000000000000000;
        digit_rom[6][4]  = 24'b001111111100000000000000;
        digit_rom[6][5]  = 24'b001100000110000000000000;
        digit_rom[6][6]  = 24'b001100000011000000000000;
        digit_rom[6][7]  = 24'b001100000011000000000000;
        digit_rom[6][8]  = 24'b000110000110000000000000;
        digit_rom[6][9]  = 24'b000011111100000000000000;

        // Digit 7
        digit_rom[7][0]  = 24'b011111111110000000000000;
        digit_rom[7][1]  = 24'b000000000110000000000000;
        digit_rom[7][2]  = 24'b000000001100000000000000;
        digit_rom[7][3]  = 24'b000000011000000000000000;
        digit_rom[7][4]  = 24'b000000110000000000000000;
        digit_rom[7][5]  = 24'b000001100000000000000000;
        digit_rom[7][6]  = 24'b000001100000000000000000;
        digit_rom[7][7]  = 24'b000011000000000000000000;
        digit_rom[7][8]  = 24'b000110000000000000000000;
        digit_rom[7][9]  = 24'b000110000000000000000000;

        // Digit 8
        digit_rom[8][0]  = 24'b000111111100000000000000;
        digit_rom[8][1]  = 24'b001100000110000000000000;
        digit_rom[8][2]  = 24'b001100000110000000000000;
        digit_rom[8][3]  = 24'b000110000110000000000000;
        digit_rom[8][4]  = 24'b000011111100000000000000;
        digit_rom[8][5]  = 24'b001100000110000000000000;
        digit_rom[8][6]  = 24'b001100000110000000000000;
        digit_rom[8][7]  = 24'b001100000110000000000000;
        digit_rom[8][8]  = 24'b001100000110000000000000;
        digit_rom[8][9]  = 24'b000111111100000000000000;

        // Digit 9
        digit_rom[9][0]  = 24'b000111111000000000000000;
        digit_rom[9][1]  = 24'b001100000100000000000000;
        digit_rom[9][2]  = 24'b011000000110000000000000;
        digit_rom[9][3]  = 24'b011000000110000000000000;
        digit_rom[9][4]  = 24'b001111111110000000000000;
        digit_rom[9][5]  = 24'b000000000110000000000000;
        digit_rom[9][6]  = 24'b000000000110000000000000;
        digit_rom[9][7]  = 24'b000000001100000000000000;
        digit_rom[9][8]  = 24'b000000011000000000000000;
        digit_rom[9][9]  = 24'b000111110000000000000000;
    end

    wire in_left_digit = (h_count >= digit_left_x) && (h_count < digit_left_x + DIGIT_WIDTH) &&
                         (v_count >= DIGIT_TOP) && (v_count < DIGIT_TOP + DIGIT_HEIGHT);

    wire in_right_digit = (h_count >= digit_right_x) && (h_count < digit_right_x + DIGIT_WIDTH) &&
                          (v_count >= DIGIT_TOP) && (v_count < DIGIT_TOP + DIGIT_HEIGHT);

    wire [4:0] row = v_count - DIGIT_TOP;
    wire [4:0] col_left = h_count - digit_left_x;
    wire [4:0] col_right = h_count - digit_right_x;

    wire pixel_on_left = in_left_digit && row < 32 ? digit_rom[left_digit][row][23 - col_left] : 1'b0;
    wire pixel_on_right = in_right_digit && row < 32 ? digit_rom[right_digit][row][23 - col_right] : 1'b0;

    wire in_underbar = (v_count >= DIGIT_TOP + DIGIT_HEIGHT) &&
                       (v_count <  DIGIT_TOP + DIGIT_HEIGHT + UNDERBAR_HEIGHT) &&
                       (h_count >= digit_left_x) &&
                       (h_count <  digit_right_x + DIGIT_WIDTH);

    assign draw = (pixel_on_left || pixel_on_right || in_underbar) && display_area;

    assign r = (pixel_on_left || pixel_on_right) ? 8'hFF : 8'h20;
    assign g = (pixel_on_left || pixel_on_right) ? 8'hFF : 8'h20;
    assign b = (pixel_on_left || pixel_on_right) ? 8'hFF : 8'h20;

endmodule
