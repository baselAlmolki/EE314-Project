
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Project(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);


    wire reset_button = SW[9];

    assign VGA_CLK     = CLOCK_50;
    assign VGA_BLANK_N = 1'b1;
    assign VGA_SYNC_N  = 1'b0;

    // === Clock Divider for 60Hz ===
    wire clk_60Hz;
    Clock_Divider #(.DIV(833_333)) clk_div_inst (
        .clk(CLOCK_50),
        .clk_out(clk_60Hz)
    );

    // === Player Positions (add your Y coordinate logic or constants here) ===
    wire [9:0] player1_pos_x;
    wire [9:0] player2_pos_x;
    wire [9:0] player1_pos_y = 10'd200; // example fixed y, update as needed
    wire [9:0] player2_pos_y = 10'd200; // example fixed y, update as needed

    // === Player States and flags ===
    wire [3:0] player1_state, player2_state;
    wire player1_dir_attack, player2_dir_attack;
    wire move_flag_p1, attack_flag_p1;
    wire move_flag_p2, attack_flag_p2;

    // === Gameplay Controllers ===
    GameplayControllerP1 player1 (
        .clk_60Hz(clk_60Hz),
        .key_clk(~KEY[0]),
        .switch(SW[1]),
        .reset(reset_button),
        .in_left(~KEY[3]),
        .in_right(~KEY[1]),
        .attack(~KEY[2]),
        .player2_pos_x(player2_pos_x),
		  .player2_state(player2_state),
        .screen_left_bound(0),
        .screen_right_bound(640),
        .player_pos_x(player1_pos_x),
        .player_state(player1_state),
        .is_directional_attack(player1_dir_attack),
        .move_flag(move_flag_p1),
        .attack_flag(attack_flag_p1),
		  .stun(LEDR[9])
    );
	 
    GameplayControllerP2 player2 (
        .clk_60Hz(clk_60Hz),
        .key_clk(~KEY[0]),
        .switch(SW[1]),
        .reset(reset_button),
        .in_left(SW[5]),
        .in_right(SW[3]),
        .attack(SW[4]),
        .player1_pos_x(player1_pos_x),
		  .player1_state(player1_state),
        .screen_left_bound(0),
        .screen_right_bound(640),
        .player_pos_x(player2_pos_x),
        .player_state(player2_state),
        .is_directional_attack(player2_dir_attack),
        .move_flag(move_flag_p2),
        .attack_flag(attack_flag_p2),

    );


    // === VGA Display (connect your VGA module here) ===
    Vga_Display vga_display_inst (
        .clk(CLOCK_50),
        .reset(0),
        .key_left(~KEY[3]),
        .key_right(~KEY[1]),
        .r(VGA_R),
        .g(VGA_G),
        .b(VGA_B),
        .hsync(VGA_HS),
        .vsync(VGA_VS),
        .player_x(player1_pos_x),
        .player_state(player1_state),
        .is_directional_attack(player1_dir_attack),
        .player2_x(player2_pos_x),
        .player2_state(player2_state),
        .is_directional_attack_p2(player2_dir_attack)
    );
hexto7seg hexy(
	.hex(player1_state),
	.hexn(HEX0)
	);

hexto7seg hexz(
	.hex(player2_state),
	.hexn(HEX1)
	);
    // === Debug LEDs ===
    assign LEDR[0] = move_flag_p1;
    assign LEDR[1] = attack_flag_p1;
    assign LEDR[2] = player1_dir_attack;
    assign LEDR[3] = move_flag_p2;
    assign LEDR[4] = attack_flag_p2;
    assign LEDR[5] = player2_dir_attack;
    assign LEDR[6] = player1_state == 4'd6;
    assign LEDR[7] = player1_state == 4'd7;

endmodule
