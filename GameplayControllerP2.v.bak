module GameplayControllerP1(
    input clk_60Hz,
    input key_clk,
    input switch,
    input reset,
    input in_left,
    input in_right,
    input attack,
    input [9:0] screen_left_bound,
    input [9:0] screen_right_bound,
    output reg [9:0] player_pos_x,
    output reg [2:0] player_state,

    // Output flags
    output reg is_directional_attack,
    output move_flag,
    output attack_flag
);

    parameter PLAYER_WIDTH = 10'd64;
    parameter [9:0] SPEED_FORWARD = 10'd3;
    parameter [9:0] SPEED_BACKWARD = 10'd2;

    wire logic_clk = (switch == 1'b0) ? clk_60Hz : key_clk;

    localparam S_IDLE = 3'd0,
               S_FORWARD = 3'd1,
               S_BACKWARD = 3'd2,
               S_Attack_start = 3'd3,
               S_Attack_active = 3'd4,
               S_Attack_recovery = 3'd5;

    reg [4:0] frame_counter, next_frame_counter;
    reg [9:0] tmp_result_x;
    reg [2:0] next_player_state;

    assign move_flag = (player_state == S_FORWARD) | (player_state == S_BACKWARD);
    assign attack_flag = (player_state == S_Attack_start | player_state == S_Attack_active);

    always @(posedge logic_clk or posedge reset) begin
        if (reset) begin
            player_state <= S_IDLE;
            player_pos_x <= 10'd0;
            frame_counter <= 5'd0;
            is_directional_attack <= 1'b0;
        end else begin
            player_state <= next_player_state;
            player_pos_x <= tmp_result_x;
            frame_counter <= next_frame_counter;

            if (next_player_state == S_Attack_start)
                is_directional_attack <= move_flag & attack;
            else if (next_player_state == S_IDLE)
                is_directional_attack <= 1'b0;
        end
    end

    always @(*) begin
        next_player_state = player_state;
        next_frame_counter = frame_counter;
        tmp_result_x = player_pos_x;

        case (player_state)
            S_IDLE: begin
                if (in_left & player_pos_x > screen_left_bound + SPEED_BACKWARD) begin
                    tmp_result_x = player_pos_x - SPEED_BACKWARD;
                    next_player_state = S_BACKWARD;
                end else if (in_right & player_pos_x < screen_right_bound - PLAYER_WIDTH - SPEED_FORWARD) begin
                    tmp_result_x = player_pos_x + SPEED_FORWARD;
                    next_player_state = S_FORWARD;
                end
					 else if (attack) begin
                    next_player_state = S_Attack_start;
                    next_frame_counter = 5'd5;
                end
            end

            S_FORWARD: begin
                if (attack) begin
                    next_player_state = S_Attack_start;
                    next_frame_counter = 5'd4;
                end else if (in_right & player_pos_x < screen_right_bound - PLAYER_WIDTH - SPEED_FORWARD) begin
                    tmp_result_x = player_pos_x + SPEED_FORWARD;
                    next_player_state = S_FORWARD;
                end else begin
                    next_player_state = S_IDLE;
                end
            end

            S_BACKWARD: begin
                if (attack) begin
                    next_player_state = S_Attack_start;
                    next_frame_counter = 5'd4;
                end else if (in_left & player_pos_x > screen_left_bound + SPEED_BACKWARD) begin
                    tmp_result_x = player_pos_x - SPEED_BACKWARD;
                    next_player_state = S_BACKWARD;
                end else begin
                    next_player_state = S_IDLE;
                end
            end

            S_Attack_start: begin
                if (frame_counter > 0)
                    next_frame_counter = frame_counter - 5'd1;
                else begin
                    next_player_state = S_Attack_active;
                    next_frame_counter = is_directional_attack ? 5'd3 : 5'd2;
                end
            end

            S_Attack_active: begin
                if (frame_counter > 0)
                    next_frame_counter = frame_counter - 5'd1;
                else begin
                    next_player_state = S_Attack_recovery;
                    next_frame_counter = is_directional_attack ? 5'd15 : 5'd16;
                end
            end

            S_Attack_recovery: begin
                if (frame_counter > 0)
                    next_frame_counter = frame_counter - 5'd1;
                else
                    next_player_state = S_IDLE;
            end
        endcase
    end
endmodule
